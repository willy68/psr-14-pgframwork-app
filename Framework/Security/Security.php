<?php

namespace Framework\Security;

use Framework\Environnement\Environnement;

class Security
{
    /**
     * @var int
     */
    public const TOKEN_VALUE_LENGTH = 16;

    /**
     * Tokens have an hmac generated so we can ensure
     * that tokens were generated by our application.
     *
     * Should be TOKEN_VALUE_LENGTH + strlen(hmac)
     *
     * We are currently using sha1 for the hmac which
     * creates 40 bytes.
     *
     * @var int
     */
    public const TOKEN_WITH_CHECKSUM_LENGTH = 56;

    /**
     * Last token created
     *
     * @var string
     */
    protected static $lastToken;

    /**
     * Create a random password
     *
     * @param int $length
     * @return string
     */
    public static function randomPassword(int $length): string
    {
        return substr(
            bin2hex(Security::randomBytes((int)ceil($length / 2))),
            0,
            $length
        );
    }

    public static function randomBytes(int $length): string
    {
        return random_bytes($length);
    }

    /**
     * Get a salt from Envirennement variable
     *
     * @return string|null
     */
    public static function getSalt(): ?string
    {
        return Environnement::getEnv('APP_KEY', Security::randomBytes(Security::TOKEN_VALUE_LENGTH));
    }

    /**
     * Create a new token to be used for CSRF protection
     *
     * @param int $length random bytes length default 16
     * @return string length = 40 (hash_hmac sha1) + $length (default 16) = 56
     */
    public static function createToken(int $length = Security::TOKEN_VALUE_LENGTH): string
    {
        $value = Security::randomBytes($length);

        static::$lastToken = base64_encode($value . hash_hmac('sha1', $value, static::getSalt()));

        return static::$lastToken;
    }

    public static function getLastToken(): string
    {
        return static::$lastToken;
    }

    /**
     * Apply entropy to a CSRF token
     *
     * To avoid BREACH apply a random salt value to a token
     * When the token is compared to the session the token needs
     * to be unsalted.
     *
     * @param string $token The token to salt.
     * @return string The salted token with the salt appended.
     */
    public static function saltToken(string $token): string
    {
        $decoded = base64_decode($token, true);
        $length = strlen($decoded);
        $salt = Security::randomBytes($length);
        $salted = '';
        for ($i = 0; $i < $length; $i++) {
            // XOR the token and salt together so that we can reverse it later.
            $salted .= chr(ord($decoded[$i]) ^ ord($salt[$i]));
        }

        return base64_encode($salted . $salt);
    }

    /**
     * Remove the salt from a CSRF token.
     * 
     * If $length / 2 !== $expectedLenght $token is not salted token
     *
     * @param string $token The token that could be salty.
     * @param int $expectedLength Default to Security::TOKEN_WITH_CHECKSUM_LENGTH (56)
     * @return string An unsalted token.
     */
    public static function unsaltToken(string $token, int $expectedLenght = Security::TOKEN_WITH_CHECKSUM_LENGTH): string
    {
        $decoded = base64_decode($token, true);
        $length = strlen($decoded) / 2;
        if ($length !== $expectedLenght) {
            return $token;
        }

        $salted = substr($decoded, 0, $length);
        $salt = substr($decoded, $length);

        $unsalted = '';
        for ($i = 0; $i < $length; $i++) {
            // Reverse the XOR to desalt.
            $unsalted .= chr(ord($salted[$i]) ^ ord($salt[$i]));
        }

        return base64_encode($unsalted);
    }


    /**
     * Verify that CSRF token was originally generated by the receiving application.
     *
     * @param string $token The unsalted CSRF token.
     * @param int $length Length from Security::createToken default to 16
     * @return bool
     */
    public static function verifyToken(string $token, int $length = Security::TOKEN_VALUE_LENGTH): bool
    {
        $decoded = base64_decode($token, true);

        if (strlen($decoded) <= $length) {
            return false;
        }

        $key = substr($decoded, 0, $length);
        $hmac = substr($decoded, $length);

        $expectedHmac = hash_hmac('sha1', $key, Security::getSalt());

        return hash_equals($hmac, $expectedHmac);
    }
}
